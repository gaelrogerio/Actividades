# -*- coding: utf-8 -*-
"""problema_coloracion_GaelRogerioOsuna

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uu8HbuDMNGn-bcShlS_c3FPwB9ZO5ORa
"""

!pip install python-igraph
import igraph as ig
import matplotlib.pyplot as plt
import random

matriz = [
    [0, 1, 1, 0, 0, 1],
    [1, 0, 1, 1, 0, 0],
    [1, 1, 0, 1, 0, 0],
    [0, 1, 1, 0, 1, 1],
    [0, 0, 0, 1, 0, 1],
    [1, 0, 0, 1, 1, 0]
]

n_vertices = len(matriz)
edges = []
for i in range(n_vertices):
    for j in range(n_vertices):
        if matriz[i][j] == 1:
            edges.append((i, j))

colores = ["red", "yellow", "green", "blue"]

g = ig.Graph(n_vertices, edges)
g.vs["name"] = ["0", "1", "2", "3", "4", "5"]


def graph_coloring(graph, colors):
    color_assignment = {}
    unused_colors = list(colors)
    vertices = list(graph.vs)

    for vertex in vertices:
        available_colors = set(colors)
        for neighbor in vertex.neighbors():
            if neighbor.index in color_assignment:
                available_colors.discard(color_assignment[neighbor.index])

        # Si no hay colores disponibles, forzar el uso de un color no utilizado
        if not available_colors:
            chosen_color = unused_colors.pop(0) # Tomar el primer color no utilizado
            color_assignment[vertex.index] = chosen_color
        else:
            # Priorizar colores no utilizados si est√°n disponibles
            common_colors = list(available_colors.intersection(unused_colors))
            if common_colors:
                chosen_color = common_colors[0]
                unused_colors.remove(chosen_color)
            else:
                chosen_color = available_colors.pop()
            color_assignment[vertex.index] = chosen_color
    return color_assignment

color_assignment = graph_coloring(g, colores)
g.vs["color"] = [color_assignment[v.index] for v in g.vs]


fig, ax = plt.subplots(figsize=(8, 8))
ig.plot(
    g,
    target=ax,
    layout="circle",
    vertex_size=70,
    vertex_color=g.vs["color"],
    vertex_frame_width=4.0,
    vertex_frame_color="white",
    vertex_label=g.vs["name"],
    vertex_label_size=20.0,
    edge_width=[3],
    edge_color=["#125ecb"]
)

plt.show()